"""
Численное дифференцирование функции с помощью конечных разностей.

В этом примере реализованы два метода численного приближённого дифференцирования:
- Метод конечных разностей вперёд (forward difference): первая производная приближается через одностороннюю разность.
- Метод центральных разностей (central difference): более точная симметричная схема для приближения первой производной.
"""

import math as m


def f(x):
    """
    Целевая функция, производную которой мы хотим найти.
    Пример: 
    """

    #return 2 * x**3 - x**2 + 1
    #return x**2 - x - 3
    return m.sin(x)



def forward_difference(f, x, h=1e-5):
    """
    Вычисляет приближённое значение первой производной функции f в точке x
    с помощью метода конечных разностей вперёд (односторонняя разность).
    
    Параметры:
        f -- функция, производную которой нужно найти
        x -- точка, в которой считается производная
        h -- шаг (по умолчанию 1e-5)

    Возвращает:
        Приближённое значение производной f'(x)
    """
    return (f(x + h) - f(x)) / h


def central_difference(f, x, h=1e-5):
    """
    Вычисляет приближённое значение первой производной функции f в точке x
    с помощью метода центральных разностей (симметричная схема).
    
    Параметры:
        f -- функция, производную которой нужно найти
        x -- точка, в которой считается производная
        h -- шаг (по умолчанию 1e-5)

    Возвращает:
        Приближённое значение производной f'(x)
    """
    return (f(x + h) - f(x - h)) / (2 * h)


# Точка, в которой ищем производную:
x0 = 1.0

# Основной блок запуска
if __name__ == "__main__":
    print(f'Производая функции в точке x = {x0} (конечные разности): {forward_difference(f, x0, h=1e-5)}')
    print(f'Производая функции в точке x = {x0} (центральные разности): {central_difference(f, x0, h=1e-5)}')