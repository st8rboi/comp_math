"""
Численное дифференцирование функции с помощью конечных разностей.

В этом примере реализованы два метода численного приближённого дифференцирования:
- Метод конечных разностей вперёд (forward difference): первая производная приближается через одностороннюю разность.
- Метод центральных разностей (central difference): более точная симметричная схема для приближения первой производной.
"""

def f(x):
    """
    Целевая функция, производную которой мы хотим найти.
    Пример: f(x) = 2x^3 - x^2 + 1
    """
    return 2 * x**3 - x**2 + 1


def forward_difference(f, x, h=1e-5):
    """
    Вычисляет приближённое значение первой производной функции f в точке x
    с помощью метода конечных разностей вперёд (односторонняя разность).
    
    Параметры:
        f -- функция, производную которой нужно найти
        x -- точка, в которой считается производная
        h -- шаг (по умолчанию 1e-5)

    Возвращает:
        Приближённое значение производной f'(x)
    """
    return (f(x + h) - f(x)) / h


def central_difference(f, x, h=1e-5):
    """
    Вычисляет приближённое значение первой производной функции f в точке x
    с помощью метода центральных разностей (симметричная схема).
    
    Параметры:
        f -- функция, производную которой нужно найти
        x -- точка, в которой считается производная
        h -- шаг (по умолчанию 1e-5)

    Возвращает:
        Приближённое значение производной f'(x)
    """
    return (f(x + h) - f(x - h)) / (2 * h)


# Точка, в которой ищем производную
x0 = 1.0

# Выводим значения производных, рассчитанных двумя способами
print("Производная (конечные разности вперёд) в x =", x0, "->", forward_difference(f, x0))
print("Производная (центральные разности) в x =", x0, "->", central_difference(f, x0))
